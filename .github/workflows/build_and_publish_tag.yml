name: BUILD AND PUBLISH FLUTTER IMAGES

#curl -X POST -H "Accept: application/vnd.github.v3+json" \
#     -H "Authorization: token GITHUB_PERSONAL_ACCESS_TOKEN" \
#     https://api.github.com/repos/plugfox/docker_flutter/dispatches \
#     -d '{"event_type":"build_flutter","client_payload":{"version":"3.19.0"}}'

# Trigger workflow manually or via repository dispatch event
on:
  workflow_dispatch:
    inputs:
      version:
        description: "Flutter version from https://github.com/flutter/flutter/tags"
        required: true
        type: string
      push_latest:
        description: "Tag this version as 'latest'"
        required: false
        type: boolean
        default: false
      platforms:
        description: "Target platforms (comma-separated)"
        required: false
        type: string
        default: "linux/arm64,linux/amd64"
      build_variants:
        description: "Image variants to build (comma-separated: base,web,android)"
        required: false
        type: string
        default: "base,web,android"

  repository_dispatch:
    types: [build_flutter]

# Global environment variables
env:
  DOCKER_IMAGE: plugfox/flutter
  GHCR_IMAGE: ghcr.io/${{ github.repository_owner }}/flutter
  CACHE_TAG: cache
  UBUNTU_VERSION: 24.04
  FLUTTER_HOME: /opt/flutter
  PUB_CACHE: /var/cache/pub
  ANDROID_SDK_TOOLS_VERSION: 11076708
  ANDROID_PLATFORM_VERSION: 35
  ANDROID_BUILD_TOOLS_VERSION: 35.0.0
  ANDROID_HOME: /opt/android

jobs:
  # Setup job to extract parameters and prepare environment
  setup:
    name: "Setup build parameters"
    runs-on: ubuntu-latest
    outputs:
      flutter_version: ${{ steps.parameters.outputs.flutter_version }}
      push_latest: ${{ steps.parameters.outputs.push_latest }}
      platforms: ${{ steps.parameters.outputs.platforms }}
      variants: ${{ steps.parameters.outputs.variants }}
      date: ${{ steps.parameters.outputs.date }}
    steps:
      - name: 📋 Extract parameters
        id: parameters
        run: |
          # Extract Flutter version from inputs or repository dispatch payload
          if [ -n "${{ github.event.inputs.version }}" ]; then
            FLUTTER_VERSION="${{ github.event.inputs.version }}"
          elif [ -n "${{ github.event.client_payload.version }}" ]; then
            FLUTTER_VERSION="${{ github.event.client_payload.version }}"
          else
            echo "❌ No Flutter version provided!"
            exit 1
          fi
          echo "flutter_version=${FLUTTER_VERSION}" >> $GITHUB_OUTPUT

          # Determine if latest tag should be pushed
          if [ "${{ github.event.inputs.push_latest }}" == "true" ] || [ "${{ github.event.client_payload.push_latest }}" == "true" ]; then
            PUSH_LATEST="true"
          else
            PUSH_LATEST="false"
          fi
          echo "push_latest=${PUSH_LATEST}" >> $GITHUB_OUTPUT

          # Set target platforms
          if [ -n "${{ github.event.inputs.platforms }}" ]; then
            PLATFORMS="${{ github.event.inputs.platforms }}"
          elif [ -n "${{ github.event.client_payload.platforms }}" ]; then
            PLATFORMS="${{ github.event.client_payload.platforms }}"
          else
            PLATFORMS="linux/arm64,linux/amd64"
          fi
          echo "platforms=${PLATFORMS}" >> $GITHUB_OUTPUT

          # Set image build variants
          if [ -n "${{ github.event.inputs.build_variants }}" ]; then
            VARIANTS="${{ github.event.inputs.build_variants }}"
          elif [ -n "${{ github.event.client_payload.build_variants }}" ]; then
            VARIANTS="${{ github.event.client_payload.build_variants }}"
          else
            VARIANTS="base,web,android"
          fi
          echo "variants=${VARIANTS}" >> $GITHUB_OUTPUT

          # Set build date for image labels
          echo "date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

  # Build and push base Flutter image to both Docker Hub and GHCR
  build_base:
    name: "Build Flutter base image"
    runs-on: ubuntu-latest
    needs: setup
    if: contains(needs.setup.outputs.variants, 'base')
    timeout-minutes: 90
    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: 🐳 Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: 🐳 Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
          buildkitd-flags: --debug

      - name: 🔑 Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_LOGIN_USERNAME }}
          password: ${{ secrets.DOCKER_LOGIN_PASSWORD }}

      - name: 🏷️ Prepare Docker tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKER_IMAGE }}
            ${{ env.GHCR_IMAGE }}
          tags: |
            type=raw,value=${{ needs.setup.outputs.flutter_version }}
            type=raw,value=latest,enable=${{ needs.setup.outputs.push_latest == 'true' }}

      - name: 🚀 Build and push Flutter base image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./dockerfiles/flutter.dockerfile
          platforms: ${{ needs.setup.outputs.platforms }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            org.opencontainers.image.created=${{ needs.setup.outputs.date }}
            org.opencontainers.image.version=${{ needs.setup.outputs.flutter_version }}
          build-args: |
            VERSION=${{ needs.setup.outputs.flutter_version }}
            UBUNTU_VERSION=${{ env.UBUNTU_VERSION }}
            FLUTTER_HOME=${{ env.FLUTTER_HOME }}
            PUB_CACHE=${{ env.PUB_CACHE }}
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:${{ env.CACHE_TAG }}
          cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:${{ env.CACHE_TAG }},mode=max
          provenance: true
          sbom: true

  # Build and push Flutter Web image
  build_web:
    name: "Build Flutter Web image"
    runs-on: ubuntu-latest
    needs: [setup, build_base]
    if: contains(needs.setup.outputs.variants, 'web')
    timeout-minutes: 60
    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: 🐳 Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest

      - name: 🔑 Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_LOGIN_USERNAME }}
          password: ${{ secrets.DOCKER_LOGIN_PASSWORD }}

      - name: 🏷️ Prepare Docker tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKER_IMAGE }}
            ${{ env.GHCR_IMAGE }}
          tags: |
            type=raw,value=${{ needs.setup.outputs.flutter_version }}-web
            type=raw,value=latest-web,enable=${{ needs.setup.outputs.push_latest == 'true' }}

      - name: 🚀 Build and push Flutter Web image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./dockerfiles/flutter_web.dockerfile
          platforms: ${{ needs.setup.outputs.platforms }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            org.opencontainers.image.created=${{ needs.setup.outputs.date }}
            org.opencontainers.image.version=${{ needs.setup.outputs.flutter_version }}-web
          build-args: |
            VERSION=${{ needs.setup.outputs.flutter_version }}
            BASE_IMAGE=${{ env.DOCKER_IMAGE }}:${{ needs.setup.outputs.flutter_version }}
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:${{ env.CACHE_TAG }}
          cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:${{ env.CACHE_TAG }},mode=max
          provenance: true
          sbom: true

  # Build and push Flutter Android image
  build_android:
    name: "Build Flutter Android image"
    runs-on: ubuntu-latest
    needs: [setup, build_base]
    if: contains(needs.setup.outputs.variants, 'android')
    timeout-minutes: 120
    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: 🐳 Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest

      - name: 🔑 Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_LOGIN_USERNAME }}
          password: ${{ secrets.DOCKER_LOGIN_PASSWORD }}

      - name: 🏷️ Prepare Docker tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKER_IMAGE }}
            ${{ env.GHCR_IMAGE }}
          tags: |
            type=raw,value=${{ needs.setup.outputs.flutter_version }}-android
            type=raw,value=latest-android,enable=${{ needs.setup.outputs.push_latest == 'true' }}

      - name: 🚀 Build and push Flutter Android image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./dockerfiles/flutter_android.dockerfile
          platforms: ${{ needs.setup.outputs.platforms }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            org.opencontainers.image.created=${{ needs.setup.outputs.date }}
            org.opencontainers.image.version=${{ needs.setup.outputs.flutter_version }}-android
          build-args: |
            VERSION=${{ needs.setup.outputs.flutter_version }}
            BASE_IMAGE=${{ env.DOCKER_IMAGE }}:${{ needs.setup.outputs.flutter_version }}
            ANDROID_SDK_TOOLS_VERSION=${{ env.ANDROID_SDK_TOOLS_VERSION }}
            ANDROID_PLATFORM_VERSION=${{ env.ANDROID_PLATFORM_VERSION }}
            ANDROID_BUILD_TOOLS_VERSION=${{ env.ANDROID_BUILD_TOOLS_VERSION }}
            ANDROID_HOME=${{ env.ANDROID_HOME }}
            UBUNTU_VERSION=${{ env.UBUNTU_VERSION }}
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:${{ env.CACHE_TAG }}
          cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:${{ env.CACHE_TAG }},mode=max
          provenance: true
          sbom: true

  # Verify images after build
  verify_images:
    name: "Verify images"
    runs-on: ubuntu-latest
    needs: [setup, build_base, build_web, build_android]
    if: always() && !failure() && !cancelled()
    steps:
      - name: 🔍 Check base image
        if: contains(needs.setup.outputs.variants, 'base') && needs.build_base.result == 'success'
        run: |
          docker pull ${{ env.DOCKER_IMAGE }}:${{ needs.setup.outputs.flutter_version }}
          docker run --rm ${{ env.DOCKER_IMAGE }}:${{ needs.setup.outputs.flutter_version }} flutter --version
          echo "✅ Base image verification successful"

      - name: 🔍 Check web image
        if: contains(needs.setup.outputs.variants, 'web') && needs.build_web.result == 'success'
        run: |
          docker pull ${{ env.DOCKER_IMAGE }}:${{ needs.setup.outputs.flutter_version }}-web
          docker run --rm ${{ env.DOCKER_IMAGE }}:${{ needs.setup.outputs.flutter_version }}-web flutter --version
          docker run --rm ${{ env.DOCKER_IMAGE }}:${{ needs.setup.outputs.flutter_version }}-web flutter config
          echo "✅ Web image verification successful"

      - name: 🔍 Check android image
        if: contains(needs.setup.outputs.variants, 'android') && needs.build_android.result == 'success'
        run: |
          docker pull ${{ env.DOCKER_IMAGE }}:${{ needs.setup.outputs.flutter_version }}-android
          docker run --rm ${{ env.DOCKER_IMAGE }}:${{ needs.setup.outputs.flutter_version }}-android flutter --version
          docker run --rm ${{ env.DOCKER_IMAGE }}:${{ needs.setup.outputs.flutter_version }}-android flutter doctor -v
          echo "✅ Android image verification successful"

      - name: 📊 Generate report
        run: |
          REPORT_FILE=report.md
          echo "# Flutter Docker Images Build Report" > $REPORT_FILE
          echo "- Flutter Version: ${{ needs.setup.outputs.flutter_version }}" >> $REPORT_FILE
          echo "- Build Date: ${{ needs.setup.outputs.date }}" >> $REPORT_FILE
          if [ "${{ needs.setup.outputs.push_latest }}" == "true" ]; then
            echo "- Latest Tag: Yes" >> $REPORT_FILE
          else
            echo "- Latest Tag: No" >> $REPORT_FILE
          fi
          echo "- Platforms: ${{ needs.setup.outputs.platforms }}" >> $REPORT_FILE
          echo "- Built Variants:" >> $REPORT_FILE

          if [[ "${{ needs.setup.outputs.variants }}" == *"base"* && "${{ needs.build_base.result }}" == "success" ]]; then
            echo "  - ✅ Base: ${{ env.DOCKER_IMAGE }}:${{ needs.setup.outputs.flutter_version }}" >> $REPORT_FILE
          else
            echo "  - ❌ Base" >> $REPORT_FILE
          fi

          if [[ "${{ needs.setup.outputs.variants }}" == *"web"* && "${{ needs.build_web.result }}" == "success" ]]; then
            echo "  - ✅ Web: ${{ env.DOCKER_IMAGE }}:${{ needs.setup.outputs.flutter_version }}-web" >> $REPORT_FILE
          else
            echo "  - ❌ Web" >> $REPORT_FILE
          fi

          if [[ "${{ needs.setup.outputs.variants }}" == *"android"* && "${{ needs.build_android.result }}" == "success" ]]; then
            echo "  - ✅ Android: ${{ env.DOCKER_IMAGE }}:${{ needs.setup.outputs.flutter_version }}-android" >> $REPORT_FILE
          else
            echo "  - ❌ Android" >> $REPORT_FILE
          fi

      - name: 💾 Upload report
        uses: actions/upload-artifact@v4
        with:
          name: build-report
          path: report.md
          retention-days: 30
